{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { attributeValueContainsToken } from \"./selectors\";\n\nvar TargetSet = function () {\n  function TargetSet(scope) {\n    this.scope = scope;\n  }\n\n  Object.defineProperty(TargetSet.prototype, \"element\", {\n    get: function get() {\n      return this.scope.element;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TargetSet.prototype, \"identifier\", {\n    get: function get() {\n      return this.scope.identifier;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TargetSet.prototype, \"schema\", {\n    get: function get() {\n      return this.scope.schema;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TargetSet.prototype.has = function (targetName) {\n    return this.find(targetName) != null;\n  };\n\n  TargetSet.prototype.find = function () {\n    var _this = this;\n\n    var targetNames = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      targetNames[_i] = arguments[_i];\n    }\n\n    return targetNames.reduce(function (target, targetName) {\n      return target || _this.findTarget(targetName) || _this.findLegacyTarget(targetName);\n    }, undefined);\n  };\n\n  TargetSet.prototype.findAll = function () {\n    var _this = this;\n\n    var targetNames = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      targetNames[_i] = arguments[_i];\n    }\n\n    return targetNames.reduce(function (targets, targetName) {\n      return __spreadArrays(targets, _this.findAllTargets(targetName), _this.findAllLegacyTargets(targetName));\n    }, []);\n  };\n\n  TargetSet.prototype.findTarget = function (targetName) {\n    var selector = this.getSelectorForTargetName(targetName);\n    return this.scope.findElement(selector);\n  };\n\n  TargetSet.prototype.findAllTargets = function (targetName) {\n    var selector = this.getSelectorForTargetName(targetName);\n    return this.scope.findAllElements(selector);\n  };\n\n  TargetSet.prototype.getSelectorForTargetName = function (targetName) {\n    var attributeName = \"data-\" + this.identifier + \"-target\";\n    return attributeValueContainsToken(attributeName, targetName);\n  };\n\n  TargetSet.prototype.findLegacyTarget = function (targetName) {\n    var selector = this.getLegacySelectorForTargetName(targetName);\n    return this.deprecate(this.scope.findElement(selector), targetName);\n  };\n\n  TargetSet.prototype.findAllLegacyTargets = function (targetName) {\n    var _this = this;\n\n    var selector = this.getLegacySelectorForTargetName(targetName);\n    return this.scope.findAllElements(selector).map(function (element) {\n      return _this.deprecate(element, targetName);\n    });\n  };\n\n  TargetSet.prototype.getLegacySelectorForTargetName = function (targetName) {\n    var targetDescriptor = this.identifier + \".\" + targetName;\n    return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n  };\n\n  TargetSet.prototype.deprecate = function (element, targetName) {\n    if (element) {\n      var identifier = this.identifier;\n      var attributeName = this.schema.targetAttribute;\n      this.guide.warn(element, \"target:\" + targetName, \"Please replace \" + attributeName + \"=\\\"\" + identifier + \".\" + targetName + \"\\\" with data-\" + identifier + \"-target=\\\"\" + targetName + \"\\\". \" + (\"The \" + attributeName + \" attribute is deprecated and will be removed in a future version of Stimulus.\"));\n    }\n\n    return element;\n  };\n\n  Object.defineProperty(TargetSet.prototype, \"guide\", {\n    get: function get() {\n      return this.scope.guide;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TargetSet;\n}();\n\nexport { TargetSet };","map":null,"metadata":{},"sourceType":"module"}