{"ast":null,"code":"/*\n * Implements a user-facing modal confirmation when link has a\n * \"data-confirm\" attribute using bootstrap's modals. MIT license.\n *\n *   - vjt@openssl.it  Tue Jul  2 18:45:15 CEST 2013\n */\n(function ($) {\n  /**\n   * Builds the markup for a [Bootstrap modal](http://twitter.github.io/bootstrap/javascript.html#modals)\n   * for the given `element`. Uses the following `data-` parameters to\n   * customize it:\n   *\n   *  * `data-confirm`: Contains the modal body text. HTML is allowed.\n   *                    Separate multiple paragraphs using \\n\\n.\n   *  * `data-commit`:  The 'confirm' button text. \"Confirm\" by default.\n   *  * `data-cancel`:  The 'cancel' button text. \"Cancel\" by default.\n   *  * `data-verify`:  Adds a text input in which the user has to input\n   *                    the text in this attribute value for the 'confirm'\n   *                    button to be clickable. Optional.\n   *  * `data-verify-text`:  Adds a label for the data-verify input. Optional\n   *  * `data-focus`:   Define focused input. Supported values are\n   *                    'cancel' or 'commit', 'cancel' is default for\n   *                    data-method DELETE, 'commit' for all others.\n   *\n   * You can set global setting using `dataConfirmModal.setDefaults`, for example:\n   *\n   *    dataConfirmModal.setDefaults({\n   *      title: 'Confirm your action',\n   *      commit: 'Continue',\n   *      cancel: 'Cancel',\n   *      fade:   false,\n   *      verifyClass: 'form-control',\n   *    });\n   *\n   */\n  var defaults = {\n    title: 'Are you sure?',\n    commit: 'Confirm',\n    commitClass: 'btn-danger',\n    cancel: 'Cancel',\n    cancelClass: 'btn-default',\n    fade: true,\n    verifyClass: 'form-control',\n    elements: ['a[data-confirm]', 'button[data-confirm]', 'input[type=submit][data-confirm]'],\n    focus: 'commit',\n    zIndex: 1050,\n    modalClass: false,\n    show: true\n  };\n  var settings;\n  window.dataConfirmModal = {\n    setDefaults: function setDefaults(newSettings) {\n      settings = $.extend(settings, newSettings);\n    },\n    restoreDefaults: function restoreDefaults() {\n      settings = $.extend({}, defaults);\n    },\n    confirm: function confirm(options) {\n      // Build an ephemeral modal\n      //\n      var modal = buildModal(options);\n      modal.spawn();\n      modal.on('hidden.bs.modal', function () {\n        modal.remove();\n      });\n      modal.find('.commit').on('click', function () {\n        if (options.onConfirm && options.onConfirm.call) options.onConfirm.call();\n        modal.modal('hide');\n      });\n      modal.find('.cancel').on('click', function () {\n        if (options.onCancel && options.onCancel.call) options.onCancel.call();\n        modal.modal('hide');\n      });\n    }\n  };\n  dataConfirmModal.restoreDefaults(); // Detect bootstrap version, or bail out.\n  //\n\n  if ($.fn.modal == undefined) {\n    throw new Error(\"The bootstrap modal plugin does not appear to be loaded.\");\n  }\n\n  if ($.fn.modal.Constructor == undefined) {\n    throw new Error(\"The bootstrap modal plugin does not have a Constructor ?!?\");\n  }\n\n  if ($.fn.modal.Constructor.VERSION == undefined) {\n    throw new Error(\"The bootstrap modal plugin does not have its version defined ?!?\");\n  }\n\n  var versionString = $.fn.modal.Constructor.VERSION;\n  var match = versionString.match(/^(\\d)\\./);\n\n  if (!match) {\n    throw new Error(\"Cannot identify Bootstrap version. Version string: \" + versionString);\n  }\n\n  var bootstrapVersion = parseInt(match[1]);\n\n  if (bootstrapVersion != 3 && bootstrapVersion != 4) {\n    throw new Error(\"Unsupported bootstrap version: \" + bootstrapVersion + \". data-confirm-modal supports version 3 and 4.\");\n  }\n\n  var buildElementModal = function buildElementModal(element) {\n    var options = {\n      title: element.data('title') || element.attr('title') || element.data('original-title'),\n      text: element.data('confirm'),\n      focus: element.data('focus'),\n      method: element.data('method'),\n      modalClass: element.data('modal-class'),\n      commit: element.data('commit'),\n      commitClass: element.data('commit-class'),\n      cancel: element.data('cancel'),\n      cancelClass: element.data('cancel-class'),\n      remote: element.data('remote'),\n      verify: element.data('verify'),\n      verifyRegexp: element.data('verify-regexp'),\n      verifyLabel: element.data('verify-text'),\n      verifyRegexpCaseInsensitive: element.data('verify-regexp-caseinsensitive'),\n      backdrop: element.data('backdrop'),\n      keyboard: element.data('keyboard'),\n      show: element.data('show')\n    };\n    var modal = buildModal(options);\n    modal.find('.commit').on('click', function () {\n      // Call the original event handler chain\n      element.get(0).click();\n      modal.modal('hide');\n    });\n    return modal;\n  };\n\n  var buildModal = function buildModal(options) {\n    var id = 'confirm-modal-' + String(Math.random()).slice(2, -1);\n    var fade = settings.fade ? 'fade' : '';\n    var modalClass = options.modalClass ? options.modalClass : settings.modalClass;\n    var modalTitle = '<h5 id=\"' + id + 'Label\" class=\"modal-title\"></h5> ';\n    var modalClose = '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>';\n    var modalHeader; // Bootstrap 3 and 4 have different DOMs and different CSS. In B4, the\n    // modalHeader is display:flex and the modalClose uses negative margins,\n    // so it can stay after the modalTitle.\n    //\n    // In B3, the close button floats to the right, so it must stay before\n    // the modalTitle.\n    //\n\n    switch (bootstrapVersion) {\n      case 3:\n        modalHeader = modalClose + modalTitle;\n        break;\n\n      case 4:\n        modalHeader = modalTitle + modalClose;\n        break;\n    }\n\n    var modal = $('<div id=\"' + id + '\" class=\"modal ' + modalClass + ' ' + fade + '\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"' + id + 'Label\" aria-hidden=\"true\">' + '<div class=\"modal-dialog\" role=\"document\">' + '<div class=\"modal-content\">' + '<div class=\"modal-header\">' + modalHeader + '</div>' + '<div class=\"modal-body\"></div>' + '<div class=\"modal-footer\">' + '<button class=\"btn cancel\" data-dismiss=\"modal\" aria-hidden=\"true\"></button>' + '<button class=\"btn commit\"></button>' + '</div>' + '</div>' + '</div>' + '</div>'); // Make sure it's always the top zindex\n\n    var highest = current = settings.zIndex;\n    $('.modal.in').not('#' + id).each(function () {\n      current = parseInt($(this).css('z-index'), 10);\n\n      if (current > highest) {\n        highest = current;\n      }\n    });\n    modal.css('z-index', parseInt(highest) + 1);\n    modal.find('.modal-title').text(options.title || settings.title);\n    var body = modal.find('.modal-body');\n    $.each((options.text || '').split(/\\n{2}/), function (i, piece) {\n      body.append($('<p/>').html(piece));\n    });\n    var commit = modal.find('.commit');\n    commit.text(options.commit || settings.commit);\n    commit.addClass(options.commitClass || settings.commitClass);\n    var cancel = modal.find('.cancel');\n    cancel.text(options.cancel || settings.cancel);\n    cancel.addClass(options.cancelClass || settings.cancelClass);\n\n    if (options.remote) {\n      commit.attr('data-dismiss', 'modal');\n    }\n\n    if (options.verify || options.verifyRegexp) {\n      commit.prop('disabled', true);\n      var isMatch;\n\n      if (options.verifyRegexp) {\n        var caseInsensitive = options.verifyRegexpCaseInsensitive;\n        var regexp = options.verifyRegexp;\n        var re = new RegExp(regexp, caseInsensitive ? 'i' : '');\n\n        isMatch = function isMatch(input) {\n          return input.match(re);\n        };\n      } else {\n        isMatch = function isMatch(input) {\n          return options.verify == input;\n        };\n      }\n\n      var verification = $('<input/>', {\n        \"type\": 'text',\n        \"class\": settings.verifyClass\n      }).on('keyup', function () {\n        commit.prop('disabled', !isMatch($(this).val()));\n      });\n      modal.on('shown.bs.modal', function () {\n        verification.focus();\n      });\n      modal.on('hidden.bs.modal', function () {\n        verification.val('').trigger('keyup');\n      });\n      if (options.verifyLabel) body.append($('<p>', {\n        text: options.verifyLabel\n      }));\n      body.append(verification);\n    }\n\n    var focus_element;\n\n    if (options.focus) {\n      focus_element = options.focus;\n    } else if (options.method == 'delete') {\n      focus_element = 'cancel';\n    } else {\n      focus_element = settings.focus;\n    }\n\n    focus_element = modal.find('.' + focus_element);\n    modal.on('shown.bs.modal', function () {\n      focus_element.focus();\n    });\n    $('body').append(modal);\n\n    modal.spawn = function () {\n      return modal.modal($.extend({}, {\n        backdrop: options.backdrop,\n        keyboard: options.keyboard,\n        show: options.show\n      }));\n    };\n\n    return modal;\n  };\n  /**\n   * Returns a modal already built for the given element or builds a new one,\n   * caching it into the element's `confirm-modal` data attribute.\n   */\n\n\n  var getModal = function getModal(element) {\n    var modal = element.data('confirm-modal');\n\n    if (!modal) {\n      modal = buildElementModal(element);\n      element.data('confirm-modal', modal);\n    }\n\n    return modal;\n  };\n\n  $.fn.confirmModal = function () {\n    var modal = getModal($(this));\n    modal.spawn();\n    return modal;\n  };\n\n  if (window.Rails || $.rails) {\n    /**\n     * Attaches to Rails' UJS adapter's 'confirm' event, triggered on elements\n     * having a `data-confirm` attribute set.\n     *\n     * If the modal is not visible, then it is spawned and the default Rails\n     * confirmation dialog is canceled.\n     *\n     * If the modal is visible, it means the handler is being called by the\n     * modal commit button click handler, as such the user has successfully\n     * clicked on the confirm button. In this case Rails' confirm function\n     * is briefly overriden, and afterwards reset when the modal is closed.\n     *\n     */\n    var window_confirm = window.confirm;\n    $(document).delegate(settings.elements.join(', '), 'confirm', function () {\n      var element = $(this),\n          modal = getModal(element);\n\n      if (!modal.is(':visible')) {\n        modal.spawn(); // Cancel Rails' confirmation\n\n        return false;\n      } else {\n        // Modal has been confirmed. Override Rails' handler\n        window.confirm = function () {\n          return true;\n        };\n\n        modal.one('hidden.bs.modal', function () {\n          // Reset it after modal is closed.\n          window.confirm = window_confirm;\n        }); // Proceed with Rails' handlers\n\n        return true;\n      }\n    });\n  }\n})(jQuery);","map":null,"metadata":{},"sourceType":"module"}