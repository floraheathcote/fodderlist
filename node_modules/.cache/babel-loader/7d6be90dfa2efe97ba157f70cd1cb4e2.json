{"ast":null,"code":"import { ClassPropertiesBlessing } from \"./class_properties\";\nimport { TargetPropertiesBlessing } from \"./target_properties\";\nimport { ValuePropertiesBlessing } from \"./value_properties\";\n\nvar Controller = function () {\n  function Controller(context) {\n    this.context = context;\n  }\n\n  Object.defineProperty(Controller.prototype, \"application\", {\n    get: function get() {\n      return this.context.application;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Controller.prototype, \"scope\", {\n    get: function get() {\n      return this.context.scope;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Controller.prototype, \"element\", {\n    get: function get() {\n      return this.scope.element;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Controller.prototype, \"identifier\", {\n    get: function get() {\n      return this.scope.identifier;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Controller.prototype, \"targets\", {\n    get: function get() {\n      return this.scope.targets;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Controller.prototype, \"classes\", {\n    get: function get() {\n      return this.scope.classes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Controller.prototype, \"data\", {\n    get: function get() {\n      return this.scope.data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Controller.prototype.initialize = function () {// Override in your subclass to set up initial controller state\n  };\n\n  Controller.prototype.connect = function () {// Override in your subclass to respond when the controller is connected to the DOM\n  };\n\n  Controller.prototype.disconnect = function () {// Override in your subclass to respond when the controller is disconnected from the DOM\n  };\n\n  Controller.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing];\n  Controller.targets = [];\n  Controller.values = {};\n  return Controller;\n}();\n\nexport { Controller };","map":null,"metadata":{},"sourceType":"module"}