{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { readInheritableStaticObjectPairs } from \"./inheritable_statics\";\nimport { camelize, capitalize, dasherize } from \"./string_helpers\";\n/** @hidden */\n\nexport function ValuePropertiesBlessing(constructor) {\n  var valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, \"values\");\n  var propertyDescriptorMap = {\n    valueDescriptorMap: {\n      get: function get() {\n        var _this = this;\n\n        return valueDefinitionPairs.reduce(function (result, valueDefinitionPair) {\n          var _a;\n\n          var valueDescriptor = parseValueDefinitionPair(valueDefinitionPair);\n\n          var attributeName = _this.data.getAttributeNameForKey(valueDescriptor.key);\n\n          return Object.assign(result, (_a = {}, _a[attributeName] = valueDescriptor, _a));\n        }, {});\n      }\n    }\n  };\n  return valueDefinitionPairs.reduce(function (properties, valueDefinitionPair) {\n    return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n  }, propertyDescriptorMap);\n}\n/** @hidden */\n\nexport function propertiesForValueDefinitionPair(valueDefinitionPair) {\n  var _a;\n\n  var definition = parseValueDefinitionPair(valueDefinitionPair);\n  var type = definition.type,\n      key = definition.key,\n      name = definition.name;\n  var read = readers[type],\n      write = writers[type] || writers.default;\n  return _a = {}, _a[name] = {\n    get: function get() {\n      var value = this.data.get(key);\n\n      if (value !== null) {\n        return read(value);\n      } else {\n        return definition.defaultValue;\n      }\n    },\n    set: function set(value) {\n      if (value === undefined) {\n        this.data.delete(key);\n      } else {\n        this.data.set(key, write(value));\n      }\n    }\n  }, _a[\"has\" + capitalize(name)] = {\n    get: function get() {\n      return this.data.has(key);\n    }\n  }, _a;\n}\n\nfunction parseValueDefinitionPair(_a) {\n  var token = _a[0],\n      typeConstant = _a[1];\n  var type = parseValueTypeConstant(typeConstant);\n  return valueDescriptorForTokenAndType(token, type);\n}\n\nfunction parseValueTypeConstant(typeConstant) {\n  switch (typeConstant) {\n    case Array:\n      return \"array\";\n\n    case Boolean:\n      return \"boolean\";\n\n    case Number:\n      return \"number\";\n\n    case Object:\n      return \"object\";\n\n    case String:\n      return \"string\";\n  }\n\n  throw new Error(\"Unknown value type constant \\\"\" + typeConstant + \"\\\"\");\n}\n\nfunction valueDescriptorForTokenAndType(token, type) {\n  var key = dasherize(token) + \"-value\";\n  return {\n    type: type,\n    key: key,\n    name: camelize(key),\n\n    get defaultValue() {\n      return defaultValuesByType[type];\n    }\n\n  };\n}\n\nvar defaultValuesByType = {\n  get array() {\n    return [];\n  },\n\n  boolean: false,\n  number: 0,\n\n  get object() {\n    return {};\n  },\n\n  string: \"\"\n};\nvar readers = {\n  array: function array(value) {\n    var array = JSON.parse(value);\n\n    if (!Array.isArray(array)) {\n      throw new TypeError(\"Expected array\");\n    }\n\n    return array;\n  },\n  boolean: function boolean(value) {\n    return !(value == \"0\" || value == \"false\");\n  },\n  number: function number(value) {\n    return parseFloat(value);\n  },\n  object: function object(value) {\n    var object = JSON.parse(value);\n\n    if (object === null || _typeof(object) != \"object\" || Array.isArray(object)) {\n      throw new TypeError(\"Expected object\");\n    }\n\n    return object;\n  },\n  string: function string(value) {\n    return value;\n  }\n};\nvar writers = {\n  default: writeString,\n  array: writeJSON,\n  object: writeJSON\n};\n\nfunction writeJSON(value) {\n  return JSON.stringify(value);\n}\n\nfunction writeString(value) {\n  return \"\" + value;\n}","map":null,"metadata":{},"sourceType":"module"}