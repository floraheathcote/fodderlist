{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { ClassMap } from \"./class_map\";\nimport { DataMap } from \"./data_map\";\nimport { Guide } from \"./guide\";\nimport { attributeValueContainsToken } from \"./selectors\";\nimport { TargetSet } from \"./target_set\";\n\nvar Scope = function () {\n  function Scope(schema, element, identifier, logger) {\n    var _this = this;\n\n    this.targets = new TargetSet(this);\n    this.classes = new ClassMap(this);\n    this.data = new DataMap(this);\n\n    this.containsElement = function (element) {\n      return element.closest(_this.controllerSelector) === _this.element;\n    };\n\n    this.schema = schema;\n    this.element = element;\n    this.identifier = identifier;\n    this.guide = new Guide(logger);\n  }\n\n  Scope.prototype.findElement = function (selector) {\n    return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);\n  };\n\n  Scope.prototype.findAllElements = function (selector) {\n    return __spreadArrays(this.element.matches(selector) ? [this.element] : [], this.queryElements(selector).filter(this.containsElement));\n  };\n\n  Scope.prototype.queryElements = function (selector) {\n    return Array.from(this.element.querySelectorAll(selector));\n  };\n\n  Object.defineProperty(Scope.prototype, \"controllerSelector\", {\n    get: function get() {\n      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Scope;\n}();\n\nexport { Scope };","map":null,"metadata":{},"sourceType":"module"}